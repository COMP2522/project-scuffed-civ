Index: src/main/java/org/bcit/com2522/project/scuffed/ui/NewGameMenuState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bcit.com2522.project.scuffed.ui;\r\n\r\nimport org.bcit.com2522.project.scuffed.client.Window;\r\nimport processing.core.PApplet;\r\n\r\npublic class NewGameMenuState extends MenuState {\r\n    private InputBox mapWidthInput;\r\n    private InputBox mapHeightInput;\r\n    private InputBox numPlayersInput;\r\n\r\n    private Label mapWidthLabel;\r\n\r\n    private Label mapHeightLabel;\r\n\r\n    private Label numPlayersLabel;\r\n\r\n    private Label errorMessageLabel;\r\n\r\n    private boolean showError = false;\r\n\r\n    public NewGameMenuState(Window scene, Menu menu) {\r\n        super(scene, menu, new ButtonManager(scene));\r\n        setup();\r\n    }\r\n    @Override\r\n    public void setup() {\r\n        mapWidthInput = new InputBox(50, 100, 200, 30, scene, 10, 100, \"16\");\r\n        mapHeightInput = new InputBox(50, 150, 200, 30, scene, 10, 100, \"16\");\r\n        numPlayersInput = new InputBox(50, 200, 200, 30, scene, 1, 1000, \"2\");\r\n\r\n        mapWidthLabel = new Label(50, 95, \"Map Width:\", 14, scene);\r\n        mapHeightLabel = new Label(50, 145, \"Map Height:\", 14, scene);\r\n        numPlayersLabel = new Label(50, 195, \"Number of Players:\", 14, scene);\r\n        errorMessageLabel = new Label(50, 250, \"Invalid input! Please enter values within the specified range.\", 14, scene);\r\n\r\n        Button backButton = new Button(50, 500, 250, 550, () -> onBackClicked(), \"back\", scene);\r\n        Button startButton = new Button(50, 600, 250, 650, () -> onStartClicked(), \"start\", scene);\r\n\r\n        buttonManager.add(backButton);\r\n        buttonManager.add(startButton);\r\n    }\r\n\r\n    public void onBackClicked() {\r\n        // Change the menu state to the New Game state\r\n        menu.setState(new MainMenuMenuState(scene, menu));\r\n    }\r\n\r\n    @Override\r\n    public void draw() {\r\n        super.draw();\r\n        mapWidthInput.draw();\r\n        mapHeightInput.draw();\r\n        numPlayersInput.draw();\r\n        mapWidthLabel.draw();\r\n        mapHeightLabel.draw();\r\n        numPlayersLabel.draw();\r\n\r\n        if(showError) {\r\n            errorMessageLabel.draw();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean clicked(int xpos, int ypos) {\r\n        // Check if any buttons or inputs were clicked and perform actions\r\n        if(super.clicked(xpos, ypos)) {\r\n            return true;\r\n        }\r\n        if(mapWidthInput.isClicked(xpos, ypos)){\r\n            mapWidthInput.setSelected(true);\r\n            mapHeightInput.setSelected(false);\r\n            numPlayersInput.setSelected(false);\r\n            return true;\r\n        }else if(mapHeightInput.isClicked(xpos, ypos)){\r\n            mapWidthInput.setSelected(false);\r\n            mapHeightInput.setSelected(true);\r\n            numPlayersInput.setSelected(false);\r\n            return true;\r\n        }else if(numPlayersInput.isClicked(xpos, ypos)){\r\n            mapWidthInput.setSelected(false);\r\n            mapHeightInput.setSelected(false);\r\n            numPlayersInput.setSelected(true);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public void keyPressed(char key) {\r\n        if (key == PApplet.BACKSPACE) {\r\n            if (mapWidthInput.isSelected()) {\r\n                mapWidthInput.removeCharacter();\r\n            } else if (mapHeightInput.isSelected()) {\r\n                mapHeightInput.removeCharacter();\r\n            } else if (numPlayersInput.isSelected()) {\r\n                numPlayersInput.removeCharacter();\r\n            }\r\n        } else {\r\n            if (mapWidthInput.isSelected()) {\r\n                mapWidthInput.addCharacter(key);\r\n            } else if (mapHeightInput.isSelected()) {\r\n                mapHeightInput.addCharacter(key);\r\n            } else if (numPlayersInput.isSelected()) {\r\n                numPlayersInput.addCharacter(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    // ...\r\n\r\n    public void onStartClicked() {\r\n        int mapWidth = mapWidthInput.getIntValue();\r\n        int mapHeight = mapHeightInput.getIntValue();\r\n        int numPlayers = numPlayersInput.getIntValue();\r\n        if (mapWidth >= 10 && mapWidth <= 100 && mapHeight >= 10 && mapHeight <= 100 && numPlayers >= 1 && numPlayers <= 100) {\r\n            scene.initGame(numPlayers, mapWidth, mapHeight);\r\n            menu.setState(new MainMenuMenuState(scene, menu));\r\n            scene.inGame = true;\r\n            showError = false;\r\n        } else {\r\n            showError = true;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bcit/com2522/project/scuffed/ui/NewGameMenuState.java b/src/main/java/org/bcit/com2522/project/scuffed/ui/NewGameMenuState.java
--- a/src/main/java/org/bcit/com2522/project/scuffed/ui/NewGameMenuState.java	(revision 00a4627f67180622e324c1e33fda1afcbf94b2c0)
+++ b/src/main/java/org/bcit/com2522/project/scuffed/ui/NewGameMenuState.java	(date 1680316536523)
@@ -24,9 +24,9 @@
     }
     @Override
     public void setup() {
-        mapWidthInput = new InputBox(50, 100, 200, 30, scene, 10, 100, "16");
-        mapHeightInput = new InputBox(50, 150, 200, 30, scene, 10, 100, "16");
-        numPlayersInput = new InputBox(50, 200, 200, 30, scene, 1, 1000, "2");
+        mapWidthInput = new InputBox(50, 100, 200, 30, scene, 1, 10000, "16");
+        mapHeightInput = new InputBox(50, 150, 200, 30, scene, 1, 10000, "16");
+        numPlayersInput = new InputBox(50, 200, 200, 30, scene, 1, 10000, "2");
 
         mapWidthLabel = new Label(50, 95, "Map Width:", 14, scene);
         mapHeightLabel = new Label(50, 145, "Map Height:", 14, scene);
Index: src/main/java/org/bcit/com2522/project/scuffed/client/Window.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bcit.com2522.project.scuffed.client;\r\n\r\nimport org.bcit.com2522.project.scuffed.ui.*;\r\nimport processing.core.PApplet;\r\nimport processing.core.PImage;\r\nimport processing.core.PVector;\r\n\r\nimport java.util.HashMap;\r\n\r\n/**\r\n *\r\n * @author bean\r\n *\r\n */\r\npublic class Window extends PApplet {\r\n  public static HashMap<String, PImage> GameImages;\r\n  public static HashMap<String, PImage> UIImages;\r\n\r\n  public boolean inGame = false;\r\n\r\n  public Menu menu;\r\n\r\n  public HUD hud;\r\n  public GameInstance gameInstance;\r\n  public Boolean debugMode = false;\r\n  static DebugMenu debugMenu;\r\n  public ClickableManager clickableManager;\r\n  public GraphicManager graphicManager;\r\n\r\n\r\n  /**\r\n   * Called once at the beginning of the program.\r\n   */\r\n  public void settings() {\r\n    size(1080, 720);\r\n  }\r\n\r\n  /**\r\n   * Called once at the beginning of the program.\r\n   * Initializes all objects.\r\n   */\r\n  public void setup() {\r\n    initPImages();\r\n    this.init();\r\n  }\r\n\r\n  public void init() {\r\n    //map = new Map(this, 20, 20);\r\n    clickableManager = new ClickableManager(this);\r\n    graphicManager = new GraphicManager(this);\r\n    surface.setTitle(\"Scuffed - Main Menu\");\r\n    menu = new Menu(this);\r\n  }\r\n\r\n  /**\r\n   * This initializes one HashMap to hold the PImages for all classes\r\n   */\r\n  public void initPImages(){\r\n    //Images for the GameBoard. Tiles, Units, Buildings, etc.\r\n    GameImages = new HashMap<String, PImage>();\r\n    GameImages.put(\"grassTile\", loadImage(\"sprites/Menu/tile_grass.png\"));\r\n    GameImages.put(\"rockTile\", loadImage(\"sprites/Menu/tile_rocks.png\"));\r\n    GameImages.put(\"waterTile\", loadImage(\"sprites/Menu/tile_water.png\"));\r\n    GameImages.put(\"sandTile\", loadImage(\"sprites/Menu/tile_sand.png\"));\r\n    GameImages.put(\"soldier\", loadImage( \"sprites/soldier.png\"));\r\n    GameImages.put(\"worker\", loadImage(\"sprites/worker.png\"));\r\n    GameImages.put(\"building\", loadImage(\"sprites/building.png\"));\r\n    GameImages.put(\"select\", loadImage(\"sprites/select.png\"));\r\n\r\n    //Images for the UI. Buttons, Menus, Backgrounds, etc.\r\n    UIImages = new HashMap<String, PImage>();\r\n    UIImages.put(\"logo\", loadImage(\"sprites/logo.png\"));\r\n    UIImages.put(\"menuNew\", loadImage(\"sprites/Menu/New.png\"));\r\n    UIImages.put(\"menuNewHov\", loadImage(\"sprites/Menu/New_Hov.png\"));\r\n    UIImages.put(\"menuNewSel\", loadImage(\"sprites/Menu/New_Sel.png\"));\r\n    UIImages.put(\"menuLoad\", loadImage(\"sprites/Menu/Load.png\"));\r\n    UIImages.put(\"menuLoadHov\", loadImage(\"sprites/Menu/Load_Hov.png\"));\r\n    UIImages.put(\"menuLoadSel\", loadImage(\"sprites/Menu/Load_Sel.png\"));\r\n    UIImages.put(\"menuExit\", loadImage(\"sprites/Menu/Exit.png\"));\r\n    UIImages.put(\"menuExitHov\", loadImage(\"sprites/Menu/Exit_Hov.png\"));\r\n    UIImages.put(\"menuExitSel\", loadImage(\"sprites/Menu/Exit_Sel.png\"));\r\n    UIImages.put(\"menuOnline\", loadImage(\"sprites/Menu/Online.png\"));\r\n    UIImages.put(\"menuOnlineHov\", loadImage(\"sprites/Menu/Online_hov.png\"));\r\n    UIImages.put(\"menuOnlineSel\", loadImage(\"sprites/Menu/Online_sel.png\"));\r\n    UIImages.put(\"buttonBackground\", loadImage(\"sprites/Menu/background.png\"));\r\n    UIImages.put(\"buttonHoverBackground\", loadImage(\"sprites/Menu/button_blank.png\"));\r\n    UIImages.put(\"buttonClickBackground\", loadImage(\"sprites/Menu/button_blank_pressed.png\"));\r\n    UIImages.put(\"background\", loadImage(\"sprites/backgroundDirt.png\"));\r\n  }\r\n\r\n  public void initGame(int numplayers, int mapwidth, int mapheight) {\r\n    gameInstance = new GameInstance(new HUD(this), new GameState(numplayers, mapwidth, mapheight));\r\n    gameInstance.newGame();\r\n  }\r\n\r\n  public PImage getPImage(String name) {\r\n    return GameImages.get(name);\r\n  }\r\n\r\n  public PImage loadImage2(String path) {\r\n    return loadImage(path);\r\n  }\r\n\r\n  @Override\r\n  public void keyPressed() {\r\n    if(inGame) {\r\n      gameInstance.keyPressed(key, this);\r\n    }\r\n    if (keyCode == 114) {\r\n      debugMode = !debugMode;\r\n    }\r\n    if (keyCode == ESC) {\r\n      key = 0;\r\n    }\r\n    if(menu.currentState instanceof NewGameMenuState){\r\n        NewGameMenuState newGameMenuState = (NewGameMenuState) menu.currentState;\r\n        newGameMenuState.keyPressed(key);\r\n    }\r\n    if(menu.currentState instanceof HostGameMenuState){\r\n        HostGameMenuState hostGameMenuState = (HostGameMenuState) menu.currentState;\r\n        hostGameMenuState.keyPressed(key);\r\n    }\r\n    if(menu.currentState instanceof JoinGameMenuState){\r\n        JoinGameMenuState joinGameMenuState = (JoinGameMenuState) menu.currentState;\r\n        joinGameMenuState.keyPressed(key);\r\n    }\r\n  }\r\n\r\n  @Override\r\n  public void mouseClicked() {\r\n    PVector mousePos = new PVector(mouseX, mouseY);\r\n    if(inGame) {\r\n      gameInstance.clicked(mousePos, this);\r\n      surface.setTitle(\"Scuffed Civ\");\r\n    } else {\r\n      menu.clicked(mouseX, mouseY);\r\n      surface.setTitle(\"Scuffed - \" + menu.currentState.getClass().getSimpleName());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on every frame. Updates scene object\r\n   * state and redraws the scene. Drawings appear\r\n   * in order of function calls.\r\n   */\r\n  public void draw() {\r\n\r\n    if(inGame){\r\n\r\n      background(UIImages.get(\"background\"));\r\n      gameInstance.draw(this);\r\n    } else {\r\n      background(222);\r\n      menu.draw();\r\n    }\r\n    // Debug Info - Can be added to\r\n    if(debugMode) {\r\n      debugMenu.draw();\r\n    }\r\n    graphicManager.drawGraphics();\r\n  }\r\n\r\n  public ClickableManager getClickableManager() {\r\n    return clickableManager;\r\n  }\r\n\r\n  public void addClickable(Clickable clickable) {\r\n    clickableManager.add(clickable);\r\n  }\r\n\r\n  public void removeClickable(Clickable clickable) {\r\n    clickableManager.remove(clickable);\r\n  }\r\n\r\n  public GraphicManager getGraphicManager() {\r\n    return graphicManager;\r\n  }\r\n\r\n  public void wipeGraphics() {\r\n    graphicManager.wipeGraphics();\r\n  }\r\n\r\n  public PImage getLoadedPImage(String name) {\r\n    return GameImages.get(name);\r\n  }\r\n\r\n  public Player getCurrentPlayer() {\r\n    if(gameInstance == null){\r\n      return null;\r\n    }\r\n    return gameInstance.getCurrentPlayer();\r\n  }\r\n\r\n  public void nextTurn() {\r\n    gameInstance.nextTurn();\r\n  }\r\n\r\n  public void loadGame() {\r\n    gameInstance = new GameInstance(this);\r\n    System.out.println(\"Loading game\");\r\n    gameInstance.loadGame();\r\n    inGame = true;\r\n  }\r\n\r\n  public void joinGame(String hostIP, int port) {\r\n    gameInstance = new GameInstance(this);\r\n    gameInstance.joinGame(hostIP, port);\r\n  }\r\n\r\n  public void saveGame() {\r\n    gameInstance.saveGame();\r\n  }\r\n\r\n\r\n  //TODO: implement actual server\r\n  public void initGameServer(int numplayers, int mapwidth, int mapheight, int port) {\r\n//    this.port = port;\r\n//    this.hostIP = \"localhost\";\r\n//    gameServer = new GameServer();\r\n//    gameState = new GameState(numplayers, mapwidth, mapheight);\r\n//    gameServer.start(gameState, port);\r\n//    gameState.init();\r\n  }\r\n\r\n\r\n  /**\r\n   * Main function.\r\n   *\r\n   * @param passedArgs arguments from command line\r\n   */\r\n  public static void main(String[] passedArgs) {\r\n    String[] appletArgs = new String[]{\"eatBubbles\"};\r\n    Window eatBubbles = new Window();\r\n    debugMenu = new DebugMenu(eatBubbles);\r\n    PApplet.runSketch(appletArgs, eatBubbles);\r\n  }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bcit/com2522/project/scuffed/client/Window.java b/src/main/java/org/bcit/com2522/project/scuffed/client/Window.java
--- a/src/main/java/org/bcit/com2522/project/scuffed/client/Window.java	(revision 00a4627f67180622e324c1e33fda1afcbf94b2c0)
+++ b/src/main/java/org/bcit/com2522/project/scuffed/client/Window.java	(date 1680316536530)
@@ -20,7 +20,6 @@
 
   public Menu menu;
 
-  public HUD hud;
   public GameInstance gameInstance;
   public Boolean debugMode = false;
   static DebugMenu debugMenu;
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"FrameworkDetectionExcludesConfiguration\">\r\n    <file type=\"web\" url=\"file://$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"PDMPlugin\">\r\n    <option name=\"skipTestSources\" value=\"false\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"19\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 00a4627f67180622e324c1e33fda1afcbf94b2c0)
+++ b/.idea/misc.xml	(date 1680142963630)
@@ -7,7 +7,7 @@
   <component name="PDMPlugin">
     <option name="skipTestSources" value="false" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="19" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="19" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"delegatedBuild\" value=\"true\" />\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"19\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 00a4627f67180622e324c1e33fda1afcbf94b2c0)
+++ b/.idea/gradle.xml	(date 1680142893883)
@@ -8,7 +8,7 @@
         <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="19" />
+        <option name="gradleJvm" value="openjdk-18" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
