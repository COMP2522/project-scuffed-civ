Index: src/main/java/org/bcit/com2522/project/scuffed/server/GameServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bcit.com2522.project.scuffed.server;\r\n\r\nimport org.bcit.com2522.project.scuffed.client.GameState;\r\n\r\nimport java.io.IOException;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\nimport java.util.Collections;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Coordinates the game state between multiple clients using the ClientHandler inner class to designate a new\r\n * Thread for each new client. [in progress]\r\n *\r\n * @author Cameron Walford\r\n * @version 0.1\r\n */\r\npublic class GameServer {\r\n    private ServerSocket serverSocket;\r\n    private GameState gameState;\r\n    private int port;\r\n\r\n    /**\r\n     * The list of clients connected to the server.\r\n     */\r\n    private final List<ClientHandler> clients = Collections.synchronizedList(new LinkedList<>());\r\n\r\n    public void start(GameState gameState, int port) {\r\n        try {\r\n            serverSocket = new ServerSocket(port);\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        this.gameState = gameState;\r\n\r\n        while(true){\r\n            try {\r\n                ClientHandler client = new ClientHandler(serverSocket.accept());\r\n                clients.add(client);\r\n                client.start();\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the updated game state to all clients except the current player.\r\n     *\r\n     * @param updatedGameState the updated game state\r\n     * @param currentPlayer the current player's client handler\r\n     */\r\n    public void broadcastGameState(GameState updatedGameState, ClientHandler currentPlayer) {\r\n        synchronized (clients) {\r\n            for (ClientHandler client : clients) {\r\n                if (client != currentPlayer) {\r\n                    client.sendGameState(updatedGameState);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles each new connection made to the GameServer.\r\n     *\r\n     * @author Cameron Walford\r\n     * @version 1.0\r\n     */\r\n    class ClientHandler extends Thread{\r\n        private final Socket clientSocket;\r\n        private final ObjectOutputStream oos;\r\n        private final ObjectInputStream ois;\r\n\r\n        public ClientHandler(Socket socket) {\r\n            this.clientSocket = socket;\r\n            try {\r\n                oos = new ObjectOutputStream(clientSocket.getOutputStream());\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n            try {\r\n                ois = new ObjectInputStream(clientSocket.getInputStream());\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reads the client's game state and updates the server's game state. Then broadcasts the updated\r\n         * game state to all clients.\r\n         */\r\n        public void run() {\r\n            try {\r\n                while (true) {\r\n                    GameState clientGameState = (GameState) ois.readObject();\r\n                    // Update the server's game state\r\n                    gameState = clientGameState;\r\n                    // Broadcast the updated game state to all clients\r\n                    broadcastGameState(gameState, this);\r\n                }\r\n            } catch (IOException | ClassNotFoundException e) {\r\n                e.printStackTrace();\r\n            } finally {\r\n                try {\r\n                    ois.close();\r\n                    oos.close();\r\n                    clientSocket.close();\r\n                    clients.remove(this);\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n\r\n        public void sendGameState(GameState gameState) {\r\n            try {\r\n                oos.writeObject(gameState);\r\n                oos.flush();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bcit/com2522/project/scuffed/server/GameServer.java b/src/main/java/org/bcit/com2522/project/scuffed/server/GameServer.java
--- a/src/main/java/org/bcit/com2522/project/scuffed/server/GameServer.java	
+++ b/src/main/java/org/bcit/com2522/project/scuffed/server/GameServer.java	
@@ -54,7 +54,7 @@
      * @param currentPlayer the current player's client handler
      */
     public void broadcastGameState(GameState updatedGameState, ClientHandler currentPlayer) {
-        synchronized (clients) {
+        synchronized (clients) { // Synchronize the list of clients so that it cannot be modified while iterating :^)
             for (ClientHandler client : clients) {
                 if (client != currentPlayer) {
                     client.sendGameState(updatedGameState);
@@ -63,6 +63,8 @@
         }
     }
 
+    //TODO: fix logic so that the clients are designated a player number when they connect
+
     /**
      * Handles each new connection made to the GameServer.
      *
Index: src/main/java/org/bcit/com2522/project/scuffed/client/GameState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.bcit.com2522.project.scuffed.client;\r\n\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\nimport org.json.simple.parser.JSONParser;\r\nimport org.json.simple.parser.ParseException;\r\nimport processing.core.PVector;\r\n\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static processing.core.PConstants.*;\r\n\r\npublic class GameState { //everything manager this is the player manager\r\n    int gameId;\r\n    Map map;\r\n    Player currentPlayer;\r\n    ArrayList<Player> players;// could be a circular linked list instead might make logic easier\r\n    Entity[][] entities;\r\n    Entity selected;\r\n    Window scene;\r\n\r\n    int zoomAmount;\r\n\r\n    public GameState(Window scene, int numplayers, int mapwidth, int mapheight) {\r\n        this.gameId = new Random().nextInt(10000); //make a random gameId\r\n        players = new ArrayList<Player>();\r\n        this.scene = scene;\r\n        entities = new Entity[mapwidth][mapheight];\r\n        map = new Map(scene, mapwidth, mapheight);\r\n\r\n        for(int i = 0; i < numplayers; i++) {\r\n            players.add(new Player(scene, i));\r\n        }\r\n\r\n        zoomAmount = 32;\r\n\r\n        init(); //inits players and starting entities on map\r\n    }\r\n\r\n    public GameState(){};\r\n\r\n    public void init() {\r\n        //this is just for now more logic will have to go into making players later\r\n        currentPlayer = players.get(0);\r\n\r\n        //puts entities into each corner\r\n        if(players.size() > 0) {\r\n            entities[0][0] = new Worker(scene, new Position(0, 0), players.get(0));\r\n        }\r\n        if(players.size() > 1) {\r\n            entities[entities.length - 1][entities[0].length - 1] = new Worker(scene, new Position(entities.length - 1, entities[0].length - 1), players.get(1));\r\n        }\r\n        if(players.size() > 2) {\r\n            entities[entities.length - 1][0] = new Worker(scene, new Position(entities.length - 1, 0), players.get(2));\r\n        }\r\n        if(players.size() > 3) {\r\n            entities[0][entities[0].length - 1] = new Worker(scene, new Position(0, entities[0].length - 1), players.get(3));\r\n        }\r\n        if(players.size() > 4) {\r\n            entities[(entities.length - 1) / 2][0] = new Worker(scene, new Position((entities.length - 1) / 2, 0), players.get(4));\r\n        }\r\n        if(players.size() > 5) {\r\n            entities[(entities.length - 1) / 2][entities[0].length - 1] = new Worker(scene, new Position((entities.length - 1) / 2, entities[0].length - 1), players.get(5));\r\n        }\r\n//        if(players.size() > 6) {\r\n//            entities[0][0] = new Worker(scene, new Position(0, 0), currentPlayer);\r\n//        }\r\n//        if(players.size() > 7) {\r\n//            entities[0][0] = new Worker(scene, new Position(0, 0), currentPlayer);\r\n//        }\r\n    }\r\n\r\n    public void clicked(PVector mousePos) {\r\n        Position position = new Position((int) (mousePos.x / 32), (int) (mousePos.y / 32));\r\n\r\n        if (mousePos.x >= 700 && mousePos.y >= 500) { //position of nextTurn button\r\n            save();\r\n\r\n            try {\r\n                GameState.load(scene, gameId);\r\n            } catch (FileNotFoundException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n            nextTurn();\r\n        }\r\n\r\n        //TODO everything below this should be mathed out and shortened\r\n        else if(entities[position.getX()][position.getY()] == null && selected == null) { //make new entity\r\n            //players.get(currentTurn.getPlayerNum()).addEntity(position);\r\n            //entities[position.getX()][position.getY()] = new Entity(scene, position, currentPlayer);\r\n            System.out.println(\"You can't make entities like that!\");\r\n        } else if (entities[position.getX()][position.getY()] != null &&\r\n                entities[position.getX()][position.getY()].getOwner() == currentPlayer) { //select existing entity\r\n            //.getOwner().equals(currentTurn)\r\n            selected = entities[position.getX()][position.getY()];\r\n            System.out.println(\"selected\");\r\n        } else if (entities[position.getX()][position.getY()] == null && selected != null && selected instanceof Unit) { //move selected entity\r\n            Unit unit = (Unit) selected;\r\n            if(unit.moveTo(position)) {\r\n                entities[selected.getPosition().getX()][selected.getPosition().getY()] = null;\r\n                entities[position.getX()][position.getY()] = selected;\r\n            }\r\n            System.out.println(\"trying to move\");\r\n            selected = null;\r\n        } else if (selected != null && entities[position.getX()][position.getY()] != null\r\n                && entities[position.getX()][position.getY()].getOwner() != currentPlayer) { //attack enemy entity\r\n\r\n        }\r\n        else {\r\n            System.out.println(\"you can't select that token\");\r\n        }\r\n\r\n        //else (the mouse is over a different button)\r\n    }\r\n\r\n    public void keyPressed(char key) {\r\n        if(key == 'w') {\r\n            shift(0, 1);\r\n        }\r\n        else if(key == 'a') {\r\n            shift(1, 0);\r\n        }\r\n        else if(key == 's') {\r\n            shift(0, -1);\r\n        }\r\n        else if(key == 'd') {\r\n            shift(-1, 0);\r\n        }\r\n        if (key == CODED) {\r\n            if (scene.keyCode == UP) {\r\n                zoom(2);\r\n            } else if (scene.keyCode == DOWN) {\r\n                zoom(0.5f);\r\n            }\r\n        }\r\n    }\r\n\r\n    //amount is the\r\n    public void zoom(float amount) {\r\n        //TODO entities do not zoom properly,\r\n        //this requires all entity textures to be accessed somewhere, potentially from GameState potentially\r\n        //from a different manager class for entities\r\n\r\n        if (!(zoomAmount <= 32 && amount < 1)) {\r\n            //zoom for map\r\n            zoomAmount = (int)(zoomAmount * amount);\r\n            map.resize(zoomAmount);\r\n\r\n\r\n            //zoom for entities\r\n            for (Entity[] row: entities) {\r\n                for (Entity element: row) {\r\n                    if(element != null) {\r\n                        element.resize(zoomAmount);\r\n                    }\r\n\r\n                    //scale += amount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //moving around the map, does not take unit movement into account.\r\n    public void shift(int x, int y) {\r\n        //int scale = 1;\r\n\r\n        map.shift(x, y);\r\n\r\n        for (Entity[] row: entities) {\r\n            for (Entity element: row) {\r\n                if(element != null) {\r\n                    element.shift(new Position(element.getPosition().getX() + (x),\r\n                            element.getPosition().getY() + (y)));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void nextTurn(){\r\n        //set remaining move to max\r\n        for (Entity[] row: entities) {\r\n            for (Entity element: row) {\r\n                if(element instanceof Unit) {\r\n                    ((Unit) element).resetMove();\r\n                }\r\n            }\r\n        }\r\n\r\n        //set currentPlayer to next player\r\n        if (players.indexOf(currentPlayer) < players.size() - 1) {\r\n            currentPlayer = players.get(players.indexOf(currentPlayer) + 1);\r\n            System.out.println(\"next turn\");\r\n        } else {\r\n            currentPlayer = players.get(0);\r\n        }\r\n    }\r\n\r\n    public void draw() {\r\n        map.draw(zoomAmount); //drawing the map doesn't need to be color shifted\r\n\r\n        for (Entity[] row: entities) {\r\n            for (Entity entity: row) {\r\n                if(entity != null) {\r\n                    entity.draw(zoomAmount, players.indexOf(entity.getOwner())); //should be color shifted based on player number\r\n                }\r\n            }\r\n        }\r\n\r\n        currentPlayer.draw(); //this is drawing the hud.\r\n    }\r\n\r\n    /**\r\n     * Saves the current gamestate to a json file in the \"saves\" folder\r\n     * currently called at end of player turn\r\n     */\r\n    public void save(){\r\n        JSONObject gamestate = new JSONObject();\r\n        gamestate.put(\"gameId\", this.gameId);\r\n        gamestate.put(\"map\", map.toJSONObject());\r\n        gamestate.put(\"currentPlayer\", currentPlayer.toJSONObject());\r\n        JSONArray playerArray = new JSONArray();\r\n        for (Player player: players) {\r\n            playerArray.add(player.toJSONObject());\r\n        }\r\n        gamestate.put(\"players\", playerArray);\r\n        JSONArray entityArray = new JSONArray();\r\n        for (Entity[] row: entities) {\r\n            JSONArray rowArray = new JSONArray();\r\n            for (Entity entity: row) {\r\n                if(entity != null) {\r\n                    rowArray.add(entity.toJSONObject());\r\n                }\r\n            }\r\n            entityArray.add(rowArray);\r\n        }\r\n        gamestate.put(\"entities\", entityArray);\r\n        try(FileWriter saveFile = new FileWriter(\"saves/save\" + gameId + \".json\")) {\r\n            saveFile.write(gamestate.toJSONString());\r\n            saveFile.flush();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses save.json for GameState\r\n     *\r\n     * @return loadedGameState as a GameState object\r\n     * @throws FileNotFoundException\r\n     */\r\n    public static void load(Window window, int gameId) throws FileNotFoundException {\r\n        GameState loadedGameState = new GameState();\r\n        JSONParser parser = new JSONParser();\r\n        try(FileReader saveReader = new FileReader(\"saves/save\" + gameId + \".json\")){\r\n            JSONObject gameStateJSON = (JSONObject)parser.parse(saveReader);\r\n            loadedGameState.scene = window;\r\n            loadedGameState.gameId = ((Number)gameStateJSON.get(\"gameId\")).intValue() + 1;\r\n            loadedGameState.map = Map.fromJSONObject((JSONObject) gameStateJSON.get(\"map\"), window);\r\n            loadedGameState.currentPlayer = Player.fromJSONObject((JSONObject) gameStateJSON.get(\"currentPlayer\"));\r\n            JSONArray playersArray = (JSONArray) gameStateJSON.get(\"players\");\r\n            loadedGameState.players = (ArrayList<Player>) playersArray\r\n                    .stream()\r\n                    .map(playerObject ->\r\n                            Player.fromJSONObject((JSONObject)playerObject, window))\r\n                    .collect(Collectors.toList());\r\n            JSONArray entitiesArray = (JSONArray) gameStateJSON.get(\"entities\");\r\n            loadedGameState.entities = (Entity[][]) entitiesArray\r\n                    .stream()\r\n                    .map(row -> {\r\n                        if (((JSONArray)row).isEmpty()) {\r\n                            return new Entity[((JSONArray)row).size()]; // Return an empty array with the same size as the row\r\n                        } else {\r\n                            return ((JSONArray) row)\r\n                                    .stream()\r\n                                    .map((entity) -> Entity.fromJSONObject((JSONObject) entity, window))\r\n                                    .toArray(Entity[]::new);\r\n                        }\r\n                    })\r\n                    .toArray(Entity[][]::new);\r\n        } catch (IOException  | ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        loadedGameState.save();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/bcit/com2522/project/scuffed/client/GameState.java b/src/main/java/org/bcit/com2522/project/scuffed/client/GameState.java
--- a/src/main/java/org/bcit/com2522/project/scuffed/client/GameState.java	
+++ b/src/main/java/org/bcit/com2522/project/scuffed/client/GameState.java	
@@ -208,7 +208,6 @@
                 }
             }
         }
-
         currentPlayer.draw(); //this is drawing the hud.
     }
 
@@ -217,6 +216,46 @@
      * currently called at end of player turn
      */
     public void save(){
+        String gamestateJSON = toJSON();
+        try(FileWriter saveFile = new FileWriter("saves/save" + gameId + ".json")) {
+            saveFile.write(gamestateJSON);
+            saveFile.flush();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * loads a gamestate from a json file in the "saves" folder.
+     *
+     * @param window
+     * @param gameId
+     * @return
+     * @throws FileNotFoundException
+     */
+    public static GameState load(Window window, int gameId) throws FileNotFoundException {
+        try (FileReader saveReader = new FileReader("saves/save" + gameId + ".json")) {
+            char[] buffer = new char[4096]; // Adjust the buffer size as needed
+            int bytesRead;
+            StringBuilder jsonString = new StringBuilder();
+
+            while ((bytesRead = saveReader.read(buffer)) != -1) {
+                jsonString.append(buffer, 0, bytesRead);
+            }
+
+            return jsonToGameState(jsonString.toString(), window);
+        } catch (IOException | ParseException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    /**
+     * Converts the current gamestate to a json string
+     *
+     * @return a json string representing the current gamestate
+     */
+    public String toJSON() {
         JSONObject gamestate = new JSONObject();
         gamestate.put("gameId", this.gameId);
         gamestate.put("map", map.toJSONObject());
@@ -243,6 +282,7 @@
         } catch (IOException e) {
             e.printStackTrace();
         }
+        return gamestate.toJSONString();
     }
 
     /**
@@ -251,40 +291,36 @@
      * @return loadedGameState as a GameState object
      * @throws FileNotFoundException
      */
-    public static void load(Window window, int gameId) throws FileNotFoundException {
+    public static GameState jsonToGameState(String jsonString, Window window) throws ParseException {
         GameState loadedGameState = new GameState();
         JSONParser parser = new JSONParser();
-        try(FileReader saveReader = new FileReader("saves/save" + gameId + ".json")){
-            JSONObject gameStateJSON = (JSONObject)parser.parse(saveReader);
-            loadedGameState.scene = window;
-            loadedGameState.gameId = ((Number)gameStateJSON.get("gameId")).intValue() + 1;
-            loadedGameState.map = Map.fromJSONObject((JSONObject) gameStateJSON.get("map"), window);
-            loadedGameState.currentPlayer = Player.fromJSONObject((JSONObject) gameStateJSON.get("currentPlayer"));
-            JSONArray playersArray = (JSONArray) gameStateJSON.get("players");
-            loadedGameState.players = (ArrayList<Player>) playersArray
-                    .stream()
-                    .map(playerObject ->
-                            Player.fromJSONObject((JSONObject)playerObject, window))
-                    .collect(Collectors.toList());
-            JSONArray entitiesArray = (JSONArray) gameStateJSON.get("entities");
-            loadedGameState.entities = (Entity[][]) entitiesArray
-                    .stream()
-                    .map(row -> {
-                        if (((JSONArray)row).isEmpty()) {
-                            return new Entity[((JSONArray)row).size()]; // Return an empty array with the same size as the row
-                        } else {
-                            return ((JSONArray) row)
-                                    .stream()
-                                    .map((entity) -> Entity.fromJSONObject((JSONObject) entity, window))
-                                    .toArray(Entity[]::new);
-                        }
-                    })
-                    .toArray(Entity[][]::new);
-        } catch (IOException  | ParseException e) {
-            e.printStackTrace();
-        }
+        JSONObject gameStateJSON = (JSONObject) parser.parse(jsonString);
+        loadedGameState.scene = window;
+        loadedGameState.gameId = ((Number) gameStateJSON.get("gameId")).intValue() + 1;
+        loadedGameState.map = Map.fromJSONObject((JSONObject) gameStateJSON.get("map"), window);
+        loadedGameState.currentPlayer = Player.fromJSONObject((JSONObject) gameStateJSON.get("currentPlayer"));
+        JSONArray playersArray = (JSONArray) gameStateJSON.get("players");
+        loadedGameState.players = (ArrayList<Player>) playersArray
+                .stream()
+                .map(playerObject ->
+                        Player.fromJSONObject((JSONObject) playerObject, window))
+                .collect(Collectors.toList());
+        JSONArray entitiesArray = (JSONArray) gameStateJSON.get("entities");
+        loadedGameState.entities = (Entity[][]) entitiesArray
+                .stream()
+                .map(row -> {
+                    if (((JSONArray) row).isEmpty()) {
+                        return new Entity[((JSONArray) row).size()]; // Return an empty array with the same size as the row
+                    } else {
+                        return ((JSONArray) row)
+                                .stream()
+                                .map((entity) -> Entity.fromJSONObject((JSONObject) entity, window))
+                                .toArray(Entity[]::new);
+                    }
+                })
+                .toArray(Entity[][]::new);
+        return loadedGameState;
+    }
 
-        loadedGameState.save();
-    }
 
 }
